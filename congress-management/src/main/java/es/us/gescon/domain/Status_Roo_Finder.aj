// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.us.gescon.domain;

import es.us.gescon.domain.Congress;
import es.us.gescon.domain.Exposition;
import es.us.gescon.domain.Status;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Status_Roo_Finder {
    
    public static TypedQuery<Status> Status.findStatusesByCongress(Congress congress) {
        if (congress == null) throw new IllegalArgumentException("The congress argument is required");
        EntityManager em = Status.entityManager();
        TypedQuery<Status> q = em.createQuery("SELECT o FROM Status AS o WHERE o.congress = :congress", Status.class);
        q.setParameter("congress", congress);
        return q;
    }
    
    public static TypedQuery<Status> Status.findStatusesByCongressAndExposition(Congress congress, Exposition exposition) {
        if (congress == null) throw new IllegalArgumentException("The congress argument is required");
        if (exposition == null) throw new IllegalArgumentException("The exposition argument is required");
        EntityManager em = Status.entityManager();
        TypedQuery<Status> q = em.createQuery("SELECT o FROM Status AS o WHERE o.congress = :congress AND o.exposition = :exposition", Status.class);
        q.setParameter("congress", congress);
        q.setParameter("exposition", exposition);
        return q;
    }
    
    public static TypedQuery<Status> Status.findStatusesByCongressOrExposition(Congress congress, Exposition exposition) {
        if (congress == null) throw new IllegalArgumentException("The congress argument is required");
        if (exposition == null) throw new IllegalArgumentException("The exposition argument is required");
        EntityManager em = Status.entityManager();
        TypedQuery<Status> q = em.createQuery("SELECT o FROM Status AS o WHERE o.congress = :congress OR o.exposition = :exposition", Status.class);
        q.setParameter("congress", congress);
        q.setParameter("exposition", exposition);
        return q;
    }
    
    public static TypedQuery<Status> Status.findStatusesByExposition(Exposition exposition) {
        if (exposition == null) throw new IllegalArgumentException("The exposition argument is required");
        EntityManager em = Status.entityManager();
        TypedQuery<Status> q = em.createQuery("SELECT o FROM Status AS o WHERE o.exposition = :exposition", Status.class);
        q.setParameter("exposition", exposition);
        return q;
    }
    
}
