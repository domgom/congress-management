// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.us.gescon.domain;

import es.us.gescon.domain.Exposition;
import java.lang.String;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Exposition_Roo_Finder {
    
    public static TypedQuery<Exposition> Exposition.findExpositionsByCommentsLikeOrDescriptionLikeOrTitleLikeOrFilenameLike(String comments, String description, String title, String filename) {
        if (comments == null || comments.length() == 0) throw new IllegalArgumentException("The comments argument is required");
        comments = comments.replace('*', '%');
        if (comments.charAt(0) != '%') {
            comments = "%" + comments;
        }
        if (comments.charAt(comments.length() - 1) != '%') {
            comments = comments + "%";
        }
        if (description == null || description.length() == 0) throw new IllegalArgumentException("The description argument is required");
        description = description.replace('*', '%');
        if (description.charAt(0) != '%') {
            description = "%" + description;
        }
        if (description.charAt(description.length() - 1) != '%') {
            description = description + "%";
        }
        if (title == null || title.length() == 0) throw new IllegalArgumentException("The title argument is required");
        title = title.replace('*', '%');
        if (title.charAt(0) != '%') {
            title = "%" + title;
        }
        if (title.charAt(title.length() - 1) != '%') {
            title = title + "%";
        }
        if (filename == null || filename.length() == 0) throw new IllegalArgumentException("The filename argument is required");
        filename = filename.replace('*', '%');
        if (filename.charAt(0) != '%') {
            filename = "%" + filename;
        }
        if (filename.charAt(filename.length() - 1) != '%') {
            filename = filename + "%";
        }
        EntityManager em = Exposition.entityManager();
        TypedQuery<Exposition> q = em.createQuery("SELECT o FROM Exposition AS o WHERE LOWER(o.comments) LIKE LOWER(:comments)  OR LOWER(o.description) LIKE LOWER(:description)  OR LOWER(o.title) LIKE LOWER(:title)  OR LOWER(o.filename) LIKE LOWER(:filename)", Exposition.class);
        q.setParameter("comments", comments);
        q.setParameter("description", description);
        q.setParameter("title", title);
        q.setParameter("filename", filename);
        return q;
    }
    
}
